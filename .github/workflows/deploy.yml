name: Deploy RDS PostgreSQL Infra

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Python (for AWS CLI/Terraform)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install AWS CLI
        run: |
          pip install awscli

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.FIAP_POS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FIAP_POS_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.FIAP_POS_AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.FIAP_POS_AWS_REGION }}

      # Exemplo para Terraform (ajuste conforme sua stack)
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Create psycopg2 layer
        working-directory: infra
        run: |
          # Criar layer com psycopg2 para Lambda
          mkdir -p python/lib/python3.9/site-packages
          pip install psycopg2-binary -t python/lib/python3.9/site-packages/
          zip -r psycopg2-layer.zip python/
          rm -rf python/

      - name: Import existing resources (if any)
        working-directory: infra
        continue-on-error: true
        run: |
          # Tentar importar subnet group se j√° existe
          terraform import aws_db_subnet_group.postgres_subnet_group postgres-subnet-group || true

          # Tentar importar RDS instance se j√° existe
          terraform import aws_db_instance.postgres fiap-customer-db || true
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve
        env:
          AWS_ROLE_ARN: ${{ secrets.FIAP_POS_AWS_ROLE_ARN }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Get RDS Endpoint
        id: rds_output
        working-directory: infra
        run: |
          echo "endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "database_name=$(terraform output -raw database_name)" >> $GITHUB_OUTPUT

      # Seeds via Lambda (seguro para RDS privado)
      - name: Run SQL seeds via Lambda
        run: |
          echo "üå± Executando seeds via Lambda..."

          # Invocar Lambda que executa seeds dentro da VPC
          response=$(aws lambda invoke \
            --function-name rds-seeds-function \
            --payload '{}' \
            --output text \
            response.json)

          echo "Response: $response"
          cat response.json

          # Verificar se foi bem-sucedido
          if [ "$response" = "200" ]; then
            echo "‚úÖ Seeds executados com sucesso via Lambda!"
          else
            echo "‚ùå Erro ao executar seeds via Lambda"
            exit 1
          fi
        env:
          AWS_ROLE_ARN: ${{ secrets.FIAP_POS_AWS_ROLE_ARN }}

      - name: Done
        run: echo "Deploy e seed finalizados."
